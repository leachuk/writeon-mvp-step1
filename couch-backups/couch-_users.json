{
  "docs": [
    {
      "_id": "_design/_auth",
      "language": "javascript",
      "validate_doc_update": "\n    function(newDoc, oldDoc, userCtx, secObj) {\n        if (newDoc._deleted === true) {\n            // allow deletes by admins and matching users\n            // without checking the other fields\n            if ((userCtx.roles.indexOf('_admin') !== -1) ||\n                (userCtx.name == oldDoc.name)) {\n                return;\n            } else {\n                throw({forbidden: 'Only admins may delete other user docs.'});\n            }\n        }\n\n        if ((oldDoc && oldDoc.type !== 'user') || newDoc.type !== 'user') {\n            throw({forbidden : 'doc.type must be user'});\n        } // we only allow user docs for now\n\n        if (!newDoc.name) {\n            throw({forbidden: 'doc.name is required'});\n        }\n\n        if (!newDoc.roles) {\n            throw({forbidden: 'doc.roles must exist'});\n        }\n\n        if (!isArray(newDoc.roles)) {\n            throw({forbidden: 'doc.roles must be an array'});\n        }\n\n        for (var idx = 0; idx < newDoc.roles.length; idx++) {\n            if (typeof newDoc.roles[idx] !== 'string') {\n                throw({forbidden: 'doc.roles can only contain strings'});\n            }\n        }\n\n        if (newDoc._id !== ('org.couchdb.user:' + newDoc.name)) {\n            throw({\n                forbidden: 'Doc ID must be of the form org.couchdb.user:name'\n            });\n        }\n\n        if (oldDoc) { // validate all updates\n            if (oldDoc.name !== newDoc.name) {\n                throw({forbidden: 'Usernames can not be changed.'});\n            }\n        }\n\n        if (newDoc.password_sha && !newDoc.salt) {\n            throw({\n                forbidden: 'Users with password_sha must have a salt.' +\n                    'See /_utils/script/couch.js for example code.'\n            });\n        }\n\n        if (newDoc.password_scheme === \"pbkdf2\") {\n            if (typeof(newDoc.iterations) !== \"number\") {\n               throw({forbidden: \"iterations must be a number.\"});\n            }\n            if (typeof(newDoc.derived_key) !== \"string\") {\n               throw({forbidden: \"derived_key must be a string.\"});\n            }\n        }\n\n        var is_server_or_database_admin = function(userCtx, secObj) {\n            // see if the user is a server admin\n            if(userCtx.roles.indexOf('_admin') !== -1) {\n                return true; // a server admin\n            }\n\n            // see if the user a database admin specified by name\n            if(secObj && secObj.admins && secObj.admins.names) {\n                if(secObj.admins.names.indexOf(userCtx.name) !== -1) {\n                    return true; // database admin\n                }\n            }\n\n            // see if the user a database admin specified by role\n            if(secObj && secObj.admins && secObj.admins.roles) {\n                var db_roles = secObj.admins.roles;\n                for(var idx = 0; idx < userCtx.roles.length; idx++) {\n                    var user_role = userCtx.roles[idx];\n                    if(db_roles.indexOf(user_role) !== -1) {\n                        return true; // role matches!\n                    }\n                }\n            }\n\n            return false; // default to no admin\n        }\n\n        if (!is_server_or_database_admin(userCtx, secObj)) {\n            if (oldDoc) { // validate non-admin updates\n                if (userCtx.name !== newDoc.name) {\n                    throw({\n                        forbidden: 'You may only update your own user document.'\n                    });\n                }\n                // validate role updates\n                var oldRoles = oldDoc.roles.sort();\n                var newRoles = newDoc.roles.sort();\n\n                if (oldRoles.length !== newRoles.length) {\n                    throw({forbidden: 'Only _admin may edit roles'});\n                }\n\n                for (var i = 0; i < oldRoles.length; i++) {\n                    if (oldRoles[i] !== newRoles[i]) {\n                        throw({forbidden: 'Only _admin may edit roles'});\n                    }\n                }\n            } else if (newDoc.roles.length > 0) {\n                throw({forbidden: 'Only _admin may set roles'});\n            }\n        }\n\n        // no system roles in users db\n        for (var i = 0; i < newDoc.roles.length; i++) {\n            if (newDoc.roles[i][0] === '_') {\n                throw({\n                    forbidden:\n                    'No system roles (starting with underscore) in users db.'\n                });\n            }\n        }\n\n        // no system names as names\n        if (newDoc.name[0] === '_') {\n            throw({forbidden: 'Username may not start with underscore.'});\n        }\n\n        var badUserNameChars = [':'];\n\n        for (var i = 0; i < badUserNameChars.length; i++) {\n            if (newDoc.name.indexOf(badUserNameChars[i]) >= 0) {\n                throw({forbidden: 'Character `' + badUserNameChars[i] +\n                        '` is not allowed in usernames.'});\n            }\n        }\n    }\n"
    },
    {
      "_id": "_design/nano",
      "views": {
        "by_model": {
          "map": "function (doc) { if (doc.model) return emit(doc.model, null); }"
        }
      }
    },
    {
      "_id": "org.couchdb.user:admin",
      "name": "admin",
      "password": null,
      "roles": [],
      "type": "user"
    },
    {
      "_id": "org.couchdb.user:developer2@gmail.com",
      "password_scheme": "pbkdf2",
      "iterations": 10,
      "name": "developer2@gmail.com",
      "roles": [
        "editor",
        "developer"
      ],
      "type": "user",
      "userGuid": "71bdb360-82e8-11e6-a690-bfc5a84b4576",
      "isComparisonFormEnabled": true,
      "email": "developer2@gmail.com",
      "displayName": "developer 2",
      "jobRole": "developer",
      "createdDate": 1474784553,
      "lastUpdatedDate": 1474784553,
      "model": "RecruitUnitUser",
      "derived_key": "5f46e98224eeddc1b3729e594c7af4c40ee659d6",
      "salt": "59af202b7a12f8bc5690cfdb5fc2d17f"
    },
    {
      "_id": "org.couchdb.user:recruiter1@gmail.com",
      "password_scheme": "pbkdf2",
      "iterations": 10,
      "name": "recruiter1@gmail.com",
      "roles": [
        "editor",
        "recruiter"
      ],
      "type": "user",
      "email": "recruiter1@gmail.com",
      "displayName": "recruiter1",
      "jobRole": "recruiter",
      "createdDate": 1464521700622,
      "lastUpdatedDate": 1464521700622,
      "model": "RecruitUnitUser",
      "derived_key": "233e3182e75bdb5acc399930697078ba0b474616",
      "salt": "002eee1bd220a97c38c1a02a4b91ef7f"
    },
    {
      "_id": "org.couchdb.user:recruiter2@gmail.com",
      "password_scheme": "pbkdf2",
      "iterations": 10,
      "name": "recruiter2@gmail.com",
      "roles": [
        "editor",
        "recruiter"
      ],
      "type": "user",
      "userGuid": "0411ae70-82e8-11e6-a690-bfc5a84b4576",
      "email": "recruiter2@gmail.com",
      "displayName": "recruiter 2",
      "jobRole": "recruiter",
      "createdDate": 1474784369,
      "lastUpdatedDate": 1474784369,
      "model": "RecruitUnitUser",
      "derived_key": "70fb1a5afc1c6e1dd73a8f979ae2563d8a1df3aa",
      "salt": "bc8f6cde791b7bedadda6f3d1f606334"
    },
    {
      "_id": "org.couchdb.user:writeonmvpstep1-1@test.com",
      "password_scheme": "pbkdf2",
      "iterations": 10,
      "name": "writeonmvpstep1-1@test.com",
      "roles": [
        "editor",
        "developer"
      ],
      "type": "user",
      "derived_key": "975a134879a3cbef613e1753e0295391a143c3db",
      "salt": "9dd9762fb10a1078833bf286823db99c",
      "jobRole": "developer",
      "displayName": "writeon mvp step1-1"
    }
  ]
}
